{"version":3,"sources":["Components/DateRangeSelector/FastFilter.js","Components/DateRangeSelector/index.js","App.js","serviceWorker.js","index.js"],"names":["fields","FastFilter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","item","startDate","endDate","setState","moment","startOf","endOf","previousMonth","subtract","format","firstDateOfYear","lastDateOfYear","props","filterDates","onClose","_this2","react_default","a","createElement","className","map","index","key","onClick","dateChange","bind","Component","DateFilter","getStartDate","savedStartDate","localStorage","getItem","getEndDate","savedEndDate","filterData","console","log","openDateSelector","isOpen","closeDateSelector","goButton","formattedStartDate","formattedEndDate","handleChangeStart","assertThisInitialized","handleChangeEnd","date","end","diff","setItem","start","dropdownTitle","bindDateFormat","react_outside_click_handler_default","onOutsideClick","DropdownButton","title","id","noCaret","open","es","dateFormat","renderFormat","onChangeRaw","e","preventDefault","dropdownMode","selected","selectsStart","onChange","selectsEnd","DateRangeSelector_FastFilter","App","Components_DateRangeSelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1294ee11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\n\nconst fields = ['Current Month', 'Previous Month', 'Current Year', 'Previous Year'];\nclass FastFilter extends Component {\n    constructor() {\n        super();\n        this.state = {\n            value: 'Select Month',\n        }\n    }\n    dateChange(item) {\n        this.setState({\n            value: item,\n        })\n        let startDate, endDate;\n        switch (item) {\n            case 'Current Month':\n                startDate = moment().startOf('month')\n                endDate = moment().endOf('month')\n                break;\n            case 'Previous Month':\n                let previousMonth = moment().subtract(1, 'month').format('MM/DD/YYYY')\n                startDate = moment(previousMonth).startOf('month')\n                endDate = moment(previousMonth).endOf('month')\n                break;\n            case 'Current Year':\n                startDate = moment().startOf('year')\n                endDate = moment().endOf('year')\n                break;\n            case 'Previous Year':\n                let firstDateOfYear = moment().startOf('year').format('MM/DD/YYYY')\n                let lastDateOfYear = moment().endOf('year').format('MM/DD/YYYY')\n                startDate = moment(firstDateOfYear).subtract(1, 'year')\n                endDate = moment(lastDateOfYear).subtract(1, 'year')\n                break;\n        }\n        this.props.filterDates(startDate, endDate)\n        this.props.onClose()\n\n    }\n\n    render() {\n        const { value } = this.state;\n        return (\n            <div> \n                <ul className=\"listFilters\"  >\n                    {fields.map((item, index)=>{\n                    return <li  className={this.state.value == item && 'active'} key={index} value={value} onClick={this.dateChange.bind(this,item)}>{item}</li>\n                    })}\n                </ul>\n            </div>\n        )}\n}\nexport default (FastFilter)","import React, { Component, PropTypes } from 'react';\nimport DatePicker from 'react-datepicker';\nimport moment from 'moment';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { DropdownButton } from 'react-bootstrap'\nimport FastFilter from './FastFilter'\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport './index.css'\n\nclass DateFilter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startDate: moment(),\n            endDate: moment(),\n            isOpen: false\n        };\n        this.handleChangeStart = this.handleChangeStart.bind(this);\n        this.handleChangeEnd = this.handleChangeEnd.bind(this);\n    }\n\n    getStartDate = () =>{\n        let savedStartDate = localStorage.getItem('reportStartDate');\n        return savedStartDate ? savedStartDate : this.state.startDate\n    }\n\n    getEndDate = () =>{\n        let savedEndDate = localStorage.getItem('reportEndDate');\n        return savedEndDate ? savedEndDate : this.state.endDate\n    }\n\n    handleChangeStart(date, end) {\n        let endDate = this.getEndDate()\n        if (end) {\n            endDate = end\n        }\n        if (moment(endDate).diff(date, 'days') <= 0) {\n            this.setState({ startDate: moment().subtract(1, 'days') })\n            //this.props.dispatch(setReportsStartDate(moment().subtract(1, 'days')));\n            let formattedStartDate = moment().format('YYYY/MM/DD');\n            localStorage.setItem('reportStartDate', formattedStartDate);\n        } else {\n            this.setState({startDate: date})\n            //this.props.dispatch(setReportsStartDate(date));\n            let formattedStartDate = date.format('YYYY/MM/DD');\n            localStorage.setItem('reportStartDate', formattedStartDate);\n        }\n     \n    }\n\n    handleChangeEnd(date, start) {\n        let startDate = this.getStartDate()\n        if (start) {\n            startDate = start;\n        }\n        if (moment(startDate).diff(date, 'days') > 0) {\n            this.setState({endDate: moment()})\n            //this.props.dispatch(setReportsEndDate(moment()));\n            let formattedEndDate = moment().format('YYYY/MM/DD');\n            localStorage.setItem('reportEndDate', formattedEndDate);\n        } else {\n          this.setState({endDate: date})\n            //this.props.dispatch(setReportsEndDate(date));\n            let formattedEndDate = date.format('YYYY/MM/DD');\n            localStorage.setItem('reportEndDate', formattedEndDate);\n        }\n    }\n\n    filterData = (startDate, endDate) => {\n      console.log(startDate, endDate)\n        //this.props.filterData(startDate, endDate)\n    }\n\n    filterDates(start, end) {\n        let endDate = end.format('YYYY/MM/DD')\n        let startDate = start.format('YYYY/MM/DD')\n        this.handleChangeStart(start, endDate)\n        this.handleChangeEnd(end, startDate)\n        this.filterData(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));\n    }\n    openDateSelector = () => {\n        let {isOpen} = this.state\n        this.setState({isOpen: !isOpen})\n    }\n\n    closeDateSelector = () => {\n      this.setState({isOpen: false})\n    }\n  \n    goButton =()=> {\n        let formattedStartDate = this.getStartDate();\n        let formattedEndDate = this.getEndDate();\n\n        this.filterData(formattedStartDate, formattedEndDate);\n        this.openDateSelector();\n    }\n\n    bindDateFormat(date){\n        let isMoment = date instanceof moment;\n        if(!isMoment){\n            date = moment(date)\n        }\n        return moment(date).format('DD/MM/YYYY')\n    }\n\n    renderFormat(){\n      return 'DD/MM/YYYY'\n    }\n\n    render() {\n     let {isOpen} = this.state\n        let dropdownTitle = <div className=\"date\">\n            <label className=\"startEndDate\">From: <span className=\"getDate\">{this.bindDateFormat(this.getStartDate())}</span></label>\n            <label className=\"startEndDate\">To: <span className=\"getDate\">{this.bindDateFormat(this.getEndDate())}</span></label>\n\n        </div>\n        return (\n            <div className=\"report-request indent-after\">\n            <h4><span>Date Filter</span></h4>\n            <OutsideClickHandler\n                onOutsideClick={this.closeDateSelector}\n            >\n                <DropdownButton\n                        title={dropdownTitle}\n                        id={`dropdown-basic`}\n                        noCaret\n                        open={isOpen}\n                        className=\"filterDropdown\"\n                        onClick={() => this.openDateSelector()}\n                    >\n                        <div>\n                            <div className=\"dateCon\">\n                                <div className=\"toDatePicker\">\n                                    <label>From</label>\n                                    <div>\n                                    <DatePicker\n                                        dateFormat={this.renderFormat()}\n                                        onChangeRaw={(e) => e.preventDefault()}\n                                        dropdownMode=\"select\"\n                                        selected={moment(this.getStartDate())}\n                                        selectsStart\n                                        startDate={moment(this.getStartDate())}\n                                        endDate={moment(this.getEndDate())}\n                                        onChange={this.handleChangeStart}\n                                    />\n                                    </div>\n                                </div>\n                                <div className=\"fromDatePicker\">\n                                    <label>To</label>\n                                    <DatePicker\n                                        dateFormat={this.renderFormat()}\n                                        onChangeRaw={(e) => e.preventDefault()}\n                                        dropdownMode=\"select\"\n                                        selected={moment(this.getEndDate())}\n                                        selectsEnd\n                                        startDate={moment(this.getStartDate())}\n                                        endDate={moment(this.getEndDate())}\n                                        onChange={this.handleChangeEnd}\n                                    />\n                                </div>\n                                <div>\n                                    <button className=\"filterButton\" onClick={this.goButton}>Go</button>\n                                </div>\n                            </div>\n                            <FastFilter\n                                onClose={this.closeDateSelector}\n                                filterDates={this.filterDates.bind(this)}\n                            />\n                        </div>\n\n                    </DropdownButton>\n                </OutsideClickHandler>\n            </div>\n        );\n\n    }\n}\n\n\nexport default(DateFilter)","import React, { Component } from 'react';\nimport DateFilter from './Components/DateRangeSelector'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DateFilter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}